import random
import telebot
import requests
import os
from bot_logic import gen_pass
from telebot import TeleBot
from telebot.types import (
    ReplyKeyboardMarkup, 
    KeyboardButton, 
    WebAppInfo,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot("7780203660:AAGjrQKrNDVCWfq_ZaxbvVxjfeYrQi0FwWQ")

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
meme_mems = os.listdir("./img/meme")
user = {}
WEB_URL = "https://www.google.com"     

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ç–∫–∏
def get_duck_image_url():    
    url = 'https://random-d.uk/api/random'
    res = requests.get(url)
    data = res.json()
    return data['url']

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∏–º–µ
def get_tokio_anime():
    url = "https://kitsu.io/api/edge/anime?filter[text]=tokio"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ —Å –ø–æ—Å—Ç–µ—Ä–∞–º–∏
        anime_list = []
        for item in data['data']:
            if 'posterImage' in item['attributes'] and 'original' in item['attributes']['posterImage']:
                anime_list.append(item['attributes']['posterImage']['original'])
        return anime_list
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        return []

# ========================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è bot)
# ========================================

@bot.message_handler(commands=['duck'])
def duck(message):
    image_url = get_duck_image_url()
    bot.reply_to(message, image_url)

@bot.message_handler(commands=['tokio'])
def send_tokio_anime(message):
    anime_images = get_tokio_anime()
    
    if not anime_images:
        bot.reply_to(message, "üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–Ω–∏–º–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É 'tokio'")
        return
    
    random_image = random.choice(anime_images)
    bot.send_photo(message.chat.id, random_image)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–ë–æ–º–∂—É—Ä —ë–º–∞—ë –¥–µ–Ω—å–≥–∏ –µ—Å—Ç—å?–ê –µ—Å–ª–∏ –Ω–∞–π–¥—É?\n /hello - –ø–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è \n /bye - –ø–æ–ø—Ä–æ—â–∞—Ç—å—Å—è \n /pass (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)- —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å \n /google - –ø—Ä–æ—Å—Ç–æ –≥—É–≥–ª \n /heh (–∫–æ–ª-–≤–æ 'heh') - –ø–æ—Ö–µ—Ö–µ–∫–∞—Ç—å ")
    
@bot.message_handler(commands=['hello'])
def send_hello(message):
    user = message.from_user.first_name
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! " + str(user))
    
@bot.message_handler(commands=['pass'])
def send_pass(message):
    world = message.text.split()
    if len(world) < 2:
        bot.reply_to(message, gen_pass(10))
    else:
        lenght = int(world[1])
        bot.reply_to(message, gen_pass(lenght))

@bot.message_handler(commands=['smile'])
def send_random_smile(message):
    smiles = ['üòÄ', 'üòÇ', 'üòç', 'ü§©', 'üòé', 'ü§Ø', 'üëª', 'üçï', 'üöÄ', 'üéâ', '‚ù§Ô∏è', 'üî•']
    random_smile = random.choice(smiles)
    bot.reply_to(message, f"–í–æ—Ç —Ç–≤–æ–π —Å–ª—É—á–∞–π–Ω—ã–π —Å–º–∞–π–ª–∏–∫: {random_smile}")

@bot.message_handler(commands=['heh'])
def send_heh(message):
    count_heh = int(message.text.split()[1]) if len(message.text.split()) > 1 else 5
    bot.reply_to(message, "he" * count_heh)

@bot.message_handler(commands=['google'])
def send_google(message):
    reply_keyboard_markup = ReplyKeyboardMarkup(resize_keyboard=True)
    reply_keyboard_markup.row(KeyboardButton("Start MiniApp", web_app=WebAppInfo(WEB_URL)))

    inline_keyboard_markup = InlineKeyboardMarkup()
    inline_keyboard_markup.row(InlineKeyboardButton('Start MiniApp', web_app=WebAppInfo(WEB_URL)))

    bot.reply_to(message, "Click the bottom inline button to start MiniApp", reply_markup=inline_keyboard_markup)
    bot.reply_to(message, "Click keyboard button to start MiniApp", reply_markup=reply_keyboard_markup)

@bot.message_handler(content_types=['web_app_data'])
def web_app(message):
    bot.reply_to(message, f'Your message is "{message.web_app_data.data}"')

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è /memes
@bot.message_handler(commands=['memes'])
def send_memes(message):
    worlds = message.text.split()
    if len(worlds) < 2:
        bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ–º–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /memes meme")
        return
    
    cat = worlds[1].lower()
    memes_dir = f"./img/{cat}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists(memes_dir):
        bot.reply_to(message, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{cat}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üò¢")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    try:
        mem_files = os.listdir(memes_dir)
        if not mem_files:
            bot.reply_to(message, f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{cat}' –Ω–µ—Ç –º–µ–º–æ–≤ üò¢")
            return
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ: {e}")
        bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –º–µ–º–∞–º üò¢")
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–π–ª
    random_file = random.choice(mem_files)
    file_path = os.path.join(memes_dir, random_file)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    try:
        with open(file_path, "rb") as f:
            bot.send_photo(message.chat.id, f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º üò¢")

@bot.message_handler(commands=['spam'])
def send_spam(message):
    args = message.text.split()
    if len(args) < 3:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /spam [—Ç–µ–∫—Å—Ç] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")
        return
    
    try:
        text = ' '.join(args[1:-1])
        count = int(args[-1])
        
        if count > 20:
            bot.reply_to(message, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π! –ú–∞–∫—Å–∏–º—É–º 20.")
            count = 20
        
        for _ in range(count):
            bot.send_message(message.chat.id, text)
            
    except ValueError:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    bot.reply_to(message, message.text)

bot.polling()